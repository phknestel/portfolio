{"ast":null,"code":"/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\nexport default function createGetCssVar() {\n  let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  function appendVar() {\n    for (var _len = arguments.length, vars = new Array(_len), _key = 0; _key < _len; _key++) {\n      vars[_key] = arguments[_key];\n    }\n    if (!vars.length) {\n      return '';\n    }\n    const value = vars[0];\n    if (typeof value === 'string' && !value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))/)) {\n      return \", var(--\".concat(prefix ? \"\".concat(prefix, \"-\") : '').concat(value).concat(appendVar(...vars.slice(1)), \")\");\n    }\n    return \", \".concat(value);\n  } // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n\n  const getCssVar = function (field) {\n    for (var _len2 = arguments.length, vars = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      vars[_key2 - 1] = arguments[_key2];\n    }\n    return \"var(--\".concat(prefix ? \"\".concat(prefix, \"-\") : '').concat(field).concat(appendVar(...vars), \")\");\n  };\n  return getCssVar;\n}","map":{"version":3,"names":["createGetCssVar","prefix","arguments","length","undefined","appendVar","_len","vars","Array","_key","value","match","concat","slice","getCssVar","field","_len2","_key2"],"sources":["/Users/philippknestel/Documents/GitHub/portfolio/portfolio-phkn/node_modules/@mui/system/esm/cssVars/createGetCssVar.js"],"sourcesContent":["/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\nexport default function createGetCssVar(prefix = '') {\n  function appendVar(...vars) {\n    if (!vars.length) {\n      return '';\n    }\n\n    const value = vars[0];\n\n    if (typeof value === 'string' && !value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))/)) {\n      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;\n    }\n\n    return `, ${value}`;\n  } // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n\n\n  const getCssVar = (field, ...vars) => {\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...vars)})`;\n  };\n\n  return getCssVar;\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA,eAAe,SAASA,eAAeA,CAAA,EAAc;EAAA,IAAbC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EACjD,SAASG,SAASA,CAAA,EAAU;IAAA,SAAAC,IAAA,GAAAJ,SAAA,CAAAC,MAAA,EAANI,IAAI,OAAAC,KAAA,CAAAF,IAAA,GAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;MAAJF,IAAI,CAAAE,IAAA,IAAAP,SAAA,CAAAO,IAAA;IAAA;IACxB,IAAI,CAACF,IAAI,CAACJ,MAAM,EAAE;MAChB,OAAO,EAAE;IACX;IAEA,MAAMO,KAAK,GAAGH,IAAI,CAAC,CAAC,CAAC;IAErB,IAAI,OAAOG,KAAK,KAAK,QAAQ,IAAI,CAACA,KAAK,CAACC,KAAK,CAAC,6EAA6E,CAAC,EAAE;MAC5H,kBAAAC,MAAA,CAAkBX,MAAM,MAAAW,MAAA,CAAMX,MAAM,SAAM,EAAE,EAAAW,MAAA,CAAGF,KAAK,EAAAE,MAAA,CAAGP,SAAS,CAAC,GAAGE,IAAI,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC;IACpF;IAEA,YAAAD,MAAA,CAAYF,KAAK;EACnB,CAAC,CAAC;;EAGF,MAAMI,SAAS,GAAG,SAAAA,CAACC,KAAK,EAAc;IAAA,SAAAC,KAAA,GAAAd,SAAA,CAAAC,MAAA,EAATI,IAAI,OAAAC,KAAA,CAAAQ,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAJV,IAAI,CAAAU,KAAA,QAAAf,SAAA,CAAAe,KAAA;IAAA;IAC/B,gBAAAL,MAAA,CAAgBX,MAAM,MAAAW,MAAA,CAAMX,MAAM,SAAM,EAAE,EAAAW,MAAA,CAAGG,KAAK,EAAAH,MAAA,CAAGP,SAAS,CAAC,GAAGE,IAAI,CAAC;EACzE,CAAC;EAED,OAAOO,SAAS;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module"}