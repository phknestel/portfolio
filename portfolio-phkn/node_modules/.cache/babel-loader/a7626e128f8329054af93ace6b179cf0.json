{"ast":null,"code":"/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport { visit } from 'unist-util-visit';\nconst find = /[\\t ]*(?:\\r?\\n|\\r)/g;\n\n/**\n * Plugin to support hard breaks without needing spaces or escapes (turns enters\n * into `<br>`s).\n *\n * @type {import('unified').Plugin<void[], Root>}\n */\nexport default function remarkBreaks() {\n  return tree => {\n    visit(tree, 'text', (node, index, parent) => {\n      /** @type {PhrasingContent[]} */\n      const result = [];\n      let start = 0;\n      find.lastIndex = 0;\n      let match = find.exec(node.value);\n      while (match) {\n        const position = match.index;\n        if (start !== position) {\n          result.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          });\n        }\n        result.push({\n          type: 'break'\n        });\n        start = position + match[0].length;\n        match = find.exec(node.value);\n      }\n      if (result.length > 0 && parent && typeof index === 'number') {\n        if (start < node.value.length) {\n          result.push({\n            type: 'text',\n            value: node.value.slice(start)\n          });\n        }\n        parent.children.splice(index, 1, ...result);\n        return index + result.length;\n      }\n    });\n  };\n}","map":{"version":3,"names":["visit","find","remarkBreaks","tree","node","index","parent","result","start","lastIndex","match","exec","value","position","push","type","slice","length","children","splice"],"sources":["/Users/philippknestel/Documents/GitHub/portfolio/portfolio-phkn/node_modules/remark-breaks/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst find = /[\\t ]*(?:\\r?\\n|\\r)/g\n\n/**\n * Plugin to support hard breaks without needing spaces or escapes (turns enters\n * into `<br>`s).\n *\n * @type {import('unified').Plugin<void[], Root>}\n */\nexport default function remarkBreaks() {\n  return (tree) => {\n    visit(tree, 'text', (node, index, parent) => {\n      /** @type {PhrasingContent[]} */\n      const result = []\n      let start = 0\n\n      find.lastIndex = 0\n\n      let match = find.exec(node.value)\n\n      while (match) {\n        const position = match.index\n\n        if (start !== position) {\n          result.push({type: 'text', value: node.value.slice(start, position)})\n        }\n\n        result.push({type: 'break'})\n        start = position + match[0].length\n        match = find.exec(node.value)\n      }\n\n      if (result.length > 0 && parent && typeof index === 'number') {\n        if (start < node.value.length) {\n          result.push({type: 'text', value: node.value.slice(start)})\n        }\n\n        parent.children.splice(index, 1, ...result)\n        return index + result.length\n      }\n    })\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAAQA,KAAK,QAAO,kBAAkB;AAEtC,MAAMC,IAAI,GAAG,qBAAqB;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,YAAYA,CAAA,EAAG;EACrC,OAAQC,IAAI,IAAK;IACfH,KAAK,CAACG,IAAI,EAAE,MAAM,EAAE,CAACC,IAAI,EAAEC,KAAK,EAAEC,MAAM,KAAK;MAC3C;MACA,MAAMC,MAAM,GAAG,EAAE;MACjB,IAAIC,KAAK,GAAG,CAAC;MAEbP,IAAI,CAACQ,SAAS,GAAG,CAAC;MAElB,IAAIC,KAAK,GAAGT,IAAI,CAACU,IAAI,CAACP,IAAI,CAACQ,KAAK,CAAC;MAEjC,OAAOF,KAAK,EAAE;QACZ,MAAMG,QAAQ,GAAGH,KAAK,CAACL,KAAK;QAE5B,IAAIG,KAAK,KAAKK,QAAQ,EAAE;UACtBN,MAAM,CAACO,IAAI,CAAC;YAACC,IAAI,EAAE,MAAM;YAAEH,KAAK,EAAER,IAAI,CAACQ,KAAK,CAACI,KAAK,CAACR,KAAK,EAAEK,QAAQ;UAAC,CAAC,CAAC;QACvE;QAEAN,MAAM,CAACO,IAAI,CAAC;UAACC,IAAI,EAAE;QAAO,CAAC,CAAC;QAC5BP,KAAK,GAAGK,QAAQ,GAAGH,KAAK,CAAC,CAAC,CAAC,CAACO,MAAM;QAClCP,KAAK,GAAGT,IAAI,CAACU,IAAI,CAACP,IAAI,CAACQ,KAAK,CAAC;MAC/B;MAEA,IAAIL,MAAM,CAACU,MAAM,GAAG,CAAC,IAAIX,MAAM,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;QAC5D,IAAIG,KAAK,GAAGJ,IAAI,CAACQ,KAAK,CAACK,MAAM,EAAE;UAC7BV,MAAM,CAACO,IAAI,CAAC;YAACC,IAAI,EAAE,MAAM;YAAEH,KAAK,EAAER,IAAI,CAACQ,KAAK,CAACI,KAAK,CAACR,KAAK;UAAC,CAAC,CAAC;QAC7D;QAEAF,MAAM,CAACY,QAAQ,CAACC,MAAM,CAACd,KAAK,EAAE,CAAC,EAAE,GAAGE,MAAM,CAAC;QAC3C,OAAOF,KAAK,GAAGE,MAAM,CAACU,MAAM;MAC9B;IACF,CAAC,CAAC;EACJ,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module"}