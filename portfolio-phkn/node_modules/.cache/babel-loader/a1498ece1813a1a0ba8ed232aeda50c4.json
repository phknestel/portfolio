{"ast":null,"code":"/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('unist-util-visit').Visitor<Definition>} DefinitionVisitor\n */\n\nimport { visit } from 'unist-util-visit';\nconst own = {}.hasOwnProperty;\n\n/**\n *\n * @param {Node} node\n */\nexport function definitions(node) {\n  /** @type {Object.<string, Definition>} */\n  const cache = Object.create(null);\n  if (!node || !node.type) {\n    throw new Error('mdast-util-definitions expected node');\n  }\n  visit(node, 'definition', ondefinition);\n  return getDefinition;\n\n  /** @type {DefinitionVisitor} */\n  function ondefinition(definition) {\n    const id = clean(definition.identifier);\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition;\n    }\n  }\n\n  /**\n   * Get a node from the bound definition-cache.\n   *\n   * @param {string} identifier\n   * @returns {Definition|null}\n   */\n  function getDefinition(identifier) {\n    const id = clean(identifier);\n    return id && own.call(cache, id) ? cache[id] : null;\n  }\n}\n\n/**\n * @param {string} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase();\n}","map":{"version":3,"names":["visit","own","hasOwnProperty","definitions","node","cache","Object","create","type","Error","ondefinition","getDefinition","definition","id","clean","identifier","call","value","String","toUpperCase"],"sources":["/Users/philippknestel/Documents/GitHub/portfolio/portfolio-phkn/node_modules/mdast-util-definitions/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('unist-util-visit').Visitor<Definition>} DefinitionVisitor\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n *\n * @param {Node} node\n */\nexport function definitions(node) {\n  /** @type {Object.<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!node || !node.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(node, 'definition', ondefinition)\n\n  return getDefinition\n\n  /** @type {DefinitionVisitor} */\n  function ondefinition(definition) {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  }\n\n  /**\n   * Get a node from the bound definition-cache.\n   *\n   * @param {string} identifier\n   * @returns {Definition|null}\n   */\n  function getDefinition(identifier) {\n    const id = clean(identifier)\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,KAAK,QAAO,kBAAkB;AAEtC,MAAMC,GAAG,GAAG,CAAC,CAAC,CAACC,cAAc;;AAE7B;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,IAAI,EAAE;EAChC;EACA,MAAMC,KAAK,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAEjC,IAAI,CAACH,IAAI,IAAI,CAACA,IAAI,CAACI,IAAI,EAAE;IACvB,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;EACzD;EAEAT,KAAK,CAACI,IAAI,EAAE,YAAY,EAAEM,YAAY,CAAC;EAEvC,OAAOC,aAAa;;EAEpB;EACA,SAASD,YAAYA,CAACE,UAAU,EAAE;IAChC,MAAMC,EAAE,GAAGC,KAAK,CAACF,UAAU,CAACG,UAAU,CAAC;IACvC,IAAIF,EAAE,IAAI,CAACZ,GAAG,CAACe,IAAI,CAACX,KAAK,EAAEQ,EAAE,CAAC,EAAE;MAC9BR,KAAK,CAACQ,EAAE,CAAC,GAAGD,UAAU;IACxB;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,SAASD,aAAaA,CAACI,UAAU,EAAE;IACjC,MAAMF,EAAE,GAAGC,KAAK,CAACC,UAAU,CAAC;IAC5B,OAAOF,EAAE,IAAIZ,GAAG,CAACe,IAAI,CAACX,KAAK,EAAEQ,EAAE,CAAC,GAAGR,KAAK,CAACQ,EAAE,CAAC,GAAG,IAAI;EACrD;AACF;;AAEA;AACA;AACA;AACA;AACA,SAASC,KAAKA,CAACG,KAAK,EAAE;EACpB,OAAOC,MAAM,CAACD,KAAK,IAAI,EAAE,CAAC,CAACE,WAAW,CAAC,CAAC;AAC1C","ignoreList":[]},"metadata":{},"sourceType":"module"}