{"ast":null,"code":"import _toConsumableArray from \"/Users/philippknestel/Documents/GitHub/portfolio/portfolio-phkn/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {Test} [ignore]\n *   `unist-util-is` test used to assert parents\n *\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {Content|Root} Node\n * @typedef {Exclude<Extract<Node, import('mdast').Parent>, Root>} Parent\n *\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n *\n * @typedef RegExpMatchObject\n * @property {number} index\n * @property {string} input\n * @property {[Root, ...Array<Parent>, Text]} stack\n *\n * @typedef {string|RegExp} Find\n * @typedef {string|ReplaceFunction} Replace\n *\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n * @typedef {Array<Pair>} Pairs\n */\n\n/**\n * @callback ReplaceFunction\n * @param {...any} parameters\n * @returns {Array<PhrasingContent>|PhrasingContent|string|false|undefined|null}\n */\nimport escape from 'escape-string-regexp';\nimport { visitParents } from 'unist-util-visit-parents';\nimport { convert } from 'unist-util-is';\nvar own = {}.hasOwnProperty;\n/**\n * @param tree mdast tree\n * @param find Value to find and remove. When `string`, escaped and made into a global `RegExp`\n * @param [replace] Value to insert.\n *   * When `string`, turned into a Text node.\n *   * When `Function`, called with the results of calling `RegExp.exec` as\n *     arguments, in which case it can return a single or a list of `Node`,\n *     a `string` (which is wrapped in a `Text` node), or `false` to not replace\n * @param [options] Configuration.\n */\n\nexport var findAndReplace =\n/**\n * @type {(\n *   ((tree: Node, find: Find, replace?: Replace, options?: Options) => Node) &\n *   ((tree: Node, schema: FindAndReplaceSchema|FindAndReplaceList, options?: Options) => Node)\n * )}\n **/\n\n/**\n * @param {Node} tree\n * @param {Find|FindAndReplaceSchema|FindAndReplaceList} find\n * @param {Replace|Options} [replace]\n * @param {Options} [options]\n */\nfunction findAndReplace(tree, find, replace, options) {\n  /** @type {Options|undefined} */\n  var settings;\n  /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n\n  var schema;\n\n  if (typeof find === 'string' || find instanceof RegExp) {\n    // @ts-expect-error don’t expect options twice.\n    schema = [[find, replace]];\n    settings = options;\n  } else {\n    schema = find; // @ts-expect-error don’t expect replace twice.\n\n    settings = replace;\n  }\n\n  if (!settings) {\n    settings = {};\n  }\n\n  var ignored = convert(settings.ignore || []);\n  var pairs = toPairs(schema);\n  var pairIndex = -1;\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor);\n  }\n\n  return tree;\n  /** @type {import('unist-util-visit-parents/complex-types').BuildVisitor<Root, 'text'>} */\n\n  function visitor(node, parents) {\n    var index = -1;\n    /** @type {Parent|undefined} */\n\n    var grandparent;\n\n    while (++index < parents.length) {\n      var parent =\n      /** @type {Parent} */\n      parents[index];\n\n      if (ignored(parent, // @ts-expect-error mdast vs. unist parent.\n      grandparent ? grandparent.children.indexOf(parent) : undefined, grandparent)) {\n        return;\n      }\n\n      grandparent = parent;\n    }\n\n    if (grandparent) {\n      // @ts-expect-error: stack is fine.\n      return handler(node, parents);\n    }\n  }\n  /**\n   * @param {Text} node\n   * @param {[Root, ...Array<Parent>]} parents\n   * @returns {VisitorResult}\n   */\n\n\n  function handler(node, parents) {\n    var parent = parents[parents.length - 1];\n    var find = pairs[pairIndex][0];\n    var replace = pairs[pairIndex][1];\n    var start = 0; // @ts-expect-error: TS is wrong, some of these children can be text.\n\n    var index = parent.children.indexOf(node);\n    /** @type {Array<PhrasingContent>} */\n\n    var nodes = [];\n    /** @type {number|undefined} */\n\n    var position;\n    find.lastIndex = 0;\n    var match = find.exec(node.value);\n\n    while (match) {\n      position = match.index;\n      /** @type {RegExpMatchObject} */\n\n      var matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [].concat(_toConsumableArray(parents), [node])\n      };\n      var value = replace.apply(void 0, _toConsumableArray(match).concat([matchObject]));\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {\n          type: 'text',\n          value: value\n        } : undefined;\n      }\n\n      if (value === false) {\n        position = undefined;\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          });\n        }\n\n        if (Array.isArray(value)) {\n          var _nodes;\n\n          (_nodes = nodes).push.apply(_nodes, _toConsumableArray(value));\n        } else if (value) {\n          nodes.push(value);\n        }\n\n        start = position + match[0].length;\n      }\n\n      if (!find.global) {\n        break;\n      }\n\n      match = find.exec(node.value);\n    }\n\n    if (position === undefined) {\n      nodes = [node];\n    } else {\n      var _parent$children;\n\n      if (start < node.value.length) {\n        nodes.push({\n          type: 'text',\n          value: node.value.slice(start)\n        });\n      }\n\n      (_parent$children = parent.children).splice.apply(_parent$children, [index, 1].concat(_toConsumableArray(nodes)));\n    }\n\n    return index + nodes.length;\n  }\n};\n/**\n * @param {FindAndReplaceSchema|FindAndReplaceList} schema\n * @returns {Pairs}\n */\n\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  var result = [];\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema');\n  }\n\n  if (Array.isArray(schema)) {\n    var index = -1;\n\n    while (++index < schema.length) {\n      result.push([toExpression(schema[index][0]), toFunction(schema[index][1])]);\n    }\n  } else {\n    /** @type {string} */\n    var key;\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])]);\n      }\n    }\n  }\n\n  return result;\n}\n/**\n * @param {Find} find\n * @returns {RegExp}\n */\n\n\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find;\n}\n/**\n * @param {Replace} replace\n * @returns {ReplaceFunction}\n */\n\n\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : function () {\n    return replace;\n  };\n}","map":{"version":3,"names":["escape","visitParents","convert","own","hasOwnProperty","findAndReplace","tree","find","replace","options","settings","schema","RegExp","ignored","ignore","pairs","toPairs","pairIndex","length","visitor","node","parents","index","grandparent","parent","children","indexOf","undefined","handler","start","nodes","position","lastIndex","match","exec","value","matchObject","input","stack","type","push","slice","Array","isArray","global","splice","result","TypeError","toExpression","toFunction","key","call"],"sources":["/Users/philippknestel/Documents/GitHub/portfolio/portfolio-phkn/node_modules/mdast-util-find-and-replace/lib/index.js"],"sourcesContent":["/**\n * @typedef Options\n *   Configuration (optional).\n * @property {Test} [ignore]\n *   `unist-util-is` test used to assert parents\n *\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {Content|Root} Node\n * @typedef {Exclude<Extract<Node, import('mdast').Parent>, Root>} Parent\n *\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n *\n * @typedef RegExpMatchObject\n * @property {number} index\n * @property {string} input\n * @property {[Root, ...Array<Parent>, Text]} stack\n *\n * @typedef {string|RegExp} Find\n * @typedef {string|ReplaceFunction} Replace\n *\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n * @typedef {Array<Pair>} Pairs\n */\n\n/**\n * @callback ReplaceFunction\n * @param {...any} parameters\n * @returns {Array<PhrasingContent>|PhrasingContent|string|false|undefined|null}\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param tree mdast tree\n * @param find Value to find and remove. When `string`, escaped and made into a global `RegExp`\n * @param [replace] Value to insert.\n *   * When `string`, turned into a Text node.\n *   * When `Function`, called with the results of calling `RegExp.exec` as\n *     arguments, in which case it can return a single or a list of `Node`,\n *     a `string` (which is wrapped in a `Text` node), or `false` to not replace\n * @param [options] Configuration.\n */\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   ((tree: Node, find: Find, replace?: Replace, options?: Options) => Node) &\n   *   ((tree: Node, schema: FindAndReplaceSchema|FindAndReplaceList, options?: Options) => Node)\n   * )}\n   **/\n  (\n    /**\n     * @param {Node} tree\n     * @param {Find|FindAndReplaceSchema|FindAndReplaceList} find\n     * @param {Replace|Options} [replace]\n     * @param {Options} [options]\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options|undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent|undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = /** @type {Parent} */ (parents[index])\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error mdast vs. unist parent.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          // @ts-expect-error: stack is fine.\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * @param {Text} node\n       * @param {[Root, ...Array<Parent>]} parents\n       * @returns {VisitorResult}\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n        /** @type {number|undefined} */\n        let position\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          if (value === false) {\n            position = undefined\n          } else {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (position === undefined) {\n          nodes = [node]\n        } else {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * @param {FindAndReplaceSchema|FindAndReplaceList} schema\n * @returns {Pairs}\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * @param {Find} find\n * @returns {RegExp}\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * @param {Replace} replace\n * @returns {ReplaceFunction}\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}