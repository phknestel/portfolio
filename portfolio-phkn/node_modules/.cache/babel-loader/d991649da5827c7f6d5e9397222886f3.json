{"ast":null,"code":"/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\nimport { visit } from 'unist-util-visit';\nvar find = /[\\t ]*(?:\\r?\\n|\\r)/g;\n/**\n * Plugin to support hard breaks without needing spaces or escapes (turns enters\n * into `<br>`s).\n *\n * @type {import('unified').Plugin<void[], Root>}\n */\n\nexport default function remarkBreaks() {\n  return function (tree) {\n    visit(tree, 'text', function (node, index, parent) {\n      /** @type {PhrasingContent[]} */\n      var result = [];\n      var start = 0;\n      find.lastIndex = 0;\n      var match = find.exec(node.value);\n\n      while (match) {\n        var position = match.index;\n\n        if (start !== position) {\n          result.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          });\n        }\n\n        result.push({\n          type: 'break'\n        });\n        start = position + match[0].length;\n        match = find.exec(node.value);\n      }\n\n      if (result.length > 0 && parent && typeof index === 'number') {\n        var _parent$children;\n\n        if (start < node.value.length) {\n          result.push({\n            type: 'text',\n            value: node.value.slice(start)\n          });\n        }\n\n        (_parent$children = parent.children).splice.apply(_parent$children, [index, 1].concat(result));\n\n        return index + result.length;\n      }\n    });\n  };\n}","map":{"version":3,"names":["visit","find","remarkBreaks","tree","node","index","parent","result","start","lastIndex","match","exec","value","position","push","type","slice","length","children","splice"],"sources":["/Users/philippknestel/Documents/GitHub/portfolio/portfolio-phkn/node_modules/remark-breaks/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst find = /[\\t ]*(?:\\r?\\n|\\r)/g\n\n/**\n * Plugin to support hard breaks without needing spaces or escapes (turns enters\n * into `<br>`s).\n *\n * @type {import('unified').Plugin<void[], Root>}\n */\nexport default function remarkBreaks() {\n  return (tree) => {\n    visit(tree, 'text', (node, index, parent) => {\n      /** @type {PhrasingContent[]} */\n      const result = []\n      let start = 0\n\n      find.lastIndex = 0\n\n      let match = find.exec(node.value)\n\n      while (match) {\n        const position = match.index\n\n        if (start !== position) {\n          result.push({type: 'text', value: node.value.slice(start, position)})\n        }\n\n        result.push({type: 'break'})\n        start = position + match[0].length\n        match = find.exec(node.value)\n      }\n\n      if (result.length > 0 && parent && typeof index === 'number') {\n        if (start < node.value.length) {\n          result.push({type: 'text', value: node.value.slice(start)})\n        }\n\n        parent.children.splice(index, 1, ...result)\n        return index + result.length\n      }\n    })\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAAQA,KAAR,QAAoB,kBAApB;AAEA,IAAMC,IAAI,GAAG,qBAAb;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,YAAT,GAAwB;EACrC,OAAO,UAACC,IAAD,EAAU;IACfH,KAAK,CAACG,IAAD,EAAO,MAAP,EAAe,UAACC,IAAD,EAAOC,KAAP,EAAcC,MAAd,EAAyB;MAC3C;MACA,IAAMC,MAAM,GAAG,EAAf;MACA,IAAIC,KAAK,GAAG,CAAZ;MAEAP,IAAI,CAACQ,SAAL,GAAiB,CAAjB;MAEA,IAAIC,KAAK,GAAGT,IAAI,CAACU,IAAL,CAAUP,IAAI,CAACQ,KAAf,CAAZ;;MAEA,OAAOF,KAAP,EAAc;QACZ,IAAMG,QAAQ,GAAGH,KAAK,CAACL,KAAvB;;QAEA,IAAIG,KAAK,KAAKK,QAAd,EAAwB;UACtBN,MAAM,CAACO,IAAP,CAAY;YAACC,IAAI,EAAE,MAAP;YAAeH,KAAK,EAAER,IAAI,CAACQ,KAAL,CAAWI,KAAX,CAAiBR,KAAjB,EAAwBK,QAAxB;UAAtB,CAAZ;QACD;;QAEDN,MAAM,CAACO,IAAP,CAAY;UAACC,IAAI,EAAE;QAAP,CAAZ;QACAP,KAAK,GAAGK,QAAQ,GAAGH,KAAK,CAAC,CAAD,CAAL,CAASO,MAA5B;QACAP,KAAK,GAAGT,IAAI,CAACU,IAAL,CAAUP,IAAI,CAACQ,KAAf,CAAR;MACD;;MAED,IAAIL,MAAM,CAACU,MAAP,GAAgB,CAAhB,IAAqBX,MAArB,IAA+B,OAAOD,KAAP,KAAiB,QAApD,EAA8D;QAAA;;QAC5D,IAAIG,KAAK,GAAGJ,IAAI,CAACQ,KAAL,CAAWK,MAAvB,EAA+B;UAC7BV,MAAM,CAACO,IAAP,CAAY;YAACC,IAAI,EAAE,MAAP;YAAeH,KAAK,EAAER,IAAI,CAACQ,KAAL,CAAWI,KAAX,CAAiBR,KAAjB;UAAtB,CAAZ;QACD;;QAED,oBAAAF,MAAM,CAACY,QAAP,EAAgBC,MAAhB,0BAAuBd,KAAvB,EAA8B,CAA9B,SAAoCE,MAApC;;QACA,OAAOF,KAAK,GAAGE,MAAM,CAACU,MAAtB;MACD;IACF,CA7BI,CAAL;EA8BD,CA/BD;AAgCD"},"metadata":{},"sourceType":"module"}